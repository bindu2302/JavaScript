Types of JavaScript Integration: Internal vs. External
--------------------------------------------------------------
When adding JavaScript to a website, you can choose to include the code in different ways: internally within the HTML file or 
externally by linking to a separate JavaScript file. Here’s an overview of each approach:


Internal JavaScript
------------------------------
Definition: Internal JavaScript is JavaScript code written directly within the HTML file, usually inside the <script> tag in the <head> or <body> section.

How It’s Used:
----------
<html>
  <head>
    <title>My Web Page</title>
    <script>
      function showMessage() {
        alert("Hello, World!");
      }
    </script>
  </head>
  <body>
    <button onclick="showMessage()">Click Me!</button>
  </body>
</html>


Advantages:
--------------------------
Convenient for small scripts or quick changes, as you don’t need to create a separate file.

Useful for prototyping or testing small features directly in the HTML.

Reduces the number of external files, which can simplify the project structure for very small projects.

Disadvantages:
------------------------------
Can make the HTML file cluttered and harder to maintain, especially with longer scripts.

Less efficient for larger projects, as the code is embedded in every page that uses it, potentially slowing down load times.

Best for: Small projects or one-off scripts where you want quick, direct access to JavaScript within the HTML.


External JavaScript
------------------------
Definition: External JavaScript is written in a separate .js file and linked to the HTML using the <script src="filename.js"></script> tag. 
This keeps the JavaScript code and HTML structure separate.

How It’s Used:
----------------
Create an external file:

// script.js
function showMessage() {
  alert("Hello, World!");
}


Link it in the HTML file:
<html>
  <head>
    <title>My Web Page</title>
    <script src="script.js"></script>
  </head>
  <body>
  </body>
</html>


Advantages:
-----------------------
Keeps HTML files clean and organized, as the JavaScript code is managed separately.

Makes code easier to reuse and maintain, especially in larger projects where the same script may be used across multiple pages.